akka {
  loglevel = DEBUG
  persistence {
    journal {
      plugin = "inmemory-journal"
      leveldb.native = off
      leveldb-shared.store.native = off
    }
    snapshot-store.plugin = "inmemory-snapshot-store"
  }
}

akka.persistence.query.journal.leveldb {
  # Implementation class of the LevelDB ReadJournalProvider
  class = "akka.persistence.query.journal.leveldb.LeveldbReadJournalProvider"

  # Absolute path to the write journal plugin configuration entry that this
  # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
  # If undefined (or "") it will connect to the default journal as specified by the
  # akka.persistence.journal.plugin property.
  write-plugin = ""

  # The LevelDB write journal is notifying the query side as soon as things
  # are persisted, but for efficiency reasons the query side retrieves the events
  # in batches that sometimes can be delayed up to the configured `refresh-interval`.
  refresh-interval = 3s

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = 100

  event-adapters {
    tagging = "me.server.utils.cqrs.MyEventAdapter"
  }
  event-adapter-bindings {
    "me.server.utils.cqrs.MyEvent" = tagging
  }
}

inmemory-journal {
  event-adapters {
    tagging = "me.server.utils.cqrs.MyEventAdapter"
  }
  event-adapter-bindings {
    "me.server.utils.cqrs.MyEvent" = tagging
  }
}

me.server.frontend.http {
  interface = "localhost"
  port = 9000
}

database = {
  url = "jdbc:postgresql://localhost/akka-me.server.frontend.http-rest"
  url = ${?PSQL_URL}
  user = "postgres"
  user = ${?PSQL_USER}
  password = "gila"
  password = ${?PSQL_PASSWORD}
}

cors.allowed-origin = "*"